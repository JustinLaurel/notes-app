{"version":3,"sources":["utils/toasts/notes.tsx","validators/loginValidators.ts","services/loginService.tsx","state/reducers/login.ts","services/notesService.tsx","validators/parsers.ts","validators/noteValidators.ts","utils/computations.ts","state/reducers/notes.ts","components/NavBar.tsx","components/Home.tsx","components/notes/SkeletonList.tsx","state/reducers/noteActionViews.ts","components/notes/EditButton.tsx","components/notes/DeleteButton.tsx","components/notes/NoteRowSortable.tsx","components/notes/NotesList.tsx","utils/hooks.ts","components/notes/NoteForm.tsx","components/pad/Pad.tsx","state/reducers/userFormViews.ts","utils/toasts/login.tsx","components/login/LoginForm.tsx","components/login/LogoutButton.tsx","components/login/LoginButton.tsx","components/signup/SignupButton.tsx","components/UserBar.tsx","components/signup/tooltips/styling.tsx","constants.tsx","validators/userValidators.ts","components/signup/tooltips/Password.tsx","components/signup/tooltips/Username.tsx","components/signup/tooltips/Tooltips.tsx","services/signupService.tsx","state/reducers/signup.ts","utils/toasts/signup.tsx","components/signup/CheckUsernameButton.tsx","components/signup/SignupForm.tsx","App.tsx","state/store.ts","index.tsx"],"names":["DEFAULT_DURATION","noteToasts","notLoggedIn","description","status","duration","isClosable","noteTooShort","failedGet","failedCreate","parseCredentials","value","isCredentials","username","password","Error","isTokenData","login","credentials","a","console","log","axios","post","data","response","error","getStoredToken","userString","window","localStorage","getItem","parseTokenData","JSON","parse","reducer","state","type","payload","setItem","stringify","removeItem","baseUrl","UPDATE_POSITION","UPDATE_CONTENT","update","toUpdate","url","_exhaustiveCheck","put","getAll","tokenData","header","headers","token","get","notes","addNew","note","body","remove","noteId","delete","isString","String","isStringAndExists","isNote","parser","_id","content","created","isDate","position","isNewNote","isUpdatePayload","match","isNotesArray","Array","isArray","every","Boolean","Date","parseNotePositions","parsed","i","length","notePositionWithId","push","incrementNumberString","Number","isBetween","num","min","max","filterOutNote","idToFilter","filter","updatePositionsSorted","moved","activeIndex","overIndex","changedNotes","updated","moveArray","toMove","arrayMove","updatePositionsSortedInDb","positions","notesService","updatePositionsDeleted","deletedPosition","initializeNotes","dispatch","id","newState","index","findIndex","NavBar","as","Link","to","d","Home","SkeletonList","rows","rowStyle","list","Fragment","style","visibility","baseEditType","isEditing","CAiFillEdit","chakra","AiFillEdit","EditButtonView","handleEdit","buttonStyle","aria-label","icon","onClick","EditButton","useDispatch","e","preventDefault","DeleteButtonView","handleDelete","toggleHighlight","Delete","onMouseOver","onMouseOut","DeleteButton","getState","message","removeNote","noteContent","document","getElementById","color","EditTextarea","useState","edited","setEdited","textarea","useRef","useEffect","saveNote","toSave","editNote","onSubmit","ref","height","padding","verticalAlign","overflow","autoFocus","autoComplete","spellCheck","onChange","currentTarget","onBlur","display","NoteRowSortable","useSortable","setNodeRef","attributes","listeners","transition","transform","sortableStyle","x","y","undefined","actionTracker","useSelector","noteActionViews","isBeingEdited","contentNode","autosize","querySelector","NotesList","theList","map","onDragEnd","active","over","original","sortNote","modifiers","restrictToVerticalAxis","restrictToParentElement","collisionDetection","closestCenter","items","strategy","verticalListSortingStrategy","useField","initial","setValue","event","clearField","NoteFormView","forwardRef","noteInput","NoteForm","toast","useToast","formInput","addEventListener","code","current","activeElement","focus","lastNote","at","newNote","toString","temp_id","Math","round","random","noteWithId","toasts","Pad","apiKey","init","skin","menubar","plugins","statusbar","toolbar","toolbar_mode","content_css","width","branding","target","getContent","baseLoginType","baseSignupType","toggleLoginForm","hideLoginSpinner","loginForm","loginSpinner","signupForm","signupSpinner","loginToasts","failed","success","name","logoutToasts","LoginFormView","handleLogin","showSpinner","inputStyle","CFaUserAlt","FaUserAlt","CFaLock","FaLock","spacing","pointerEvents","children","placeholder","isVisible","SpinnerView","LoginForm","formVisible","userFormViews","spinnerVisible","clearToastsAndSpinner","timeout","clear","timeoutId","set","func","Function","setTimeout","clearTimeout","useTimeout","Promise","resolve","loginInfo","notifyIfTimedOut","loginService","then","catch","LogoutButtonView","handleSubmit","bg","LogoutButton","Object","keys","notifyLogout","LoginButton","toggleVisibility","SignupButton","NameView","UserBar","inline","CheckCircle","MdCheckCircle","Cross","ImCross","tooltipStyle","headingStyle","listStyle","ValidIndicator","InvalidIndicator","USERNAME_ERROR","NAME_ERROR","hasAtLeastOneLetter","test","hasAtLeastOneNumber","hasAtLeastXCharacters","parseSignupData","pass","isValidLength","firstName","lastName","verify","usernameErr","nameErr","minLength","PasswordTooltipsView","letterIsValid","numberIsValid","characterIsValid","PasswordTooltips","setCharacterValid","setNumberValid","setLetterValid","UsernameTooltipsView","usernameAvailable","UsernameTooltips","setCharacterIsValid","setUsernameAvailable","availableUsernames","signup","includes","toLowerCase","Tooltips","gridArea","Username","Password","user","checkUsernameAvailable","isAvailable","checkDatabaseForAvailability","signupService","signupToasts","available","UsernameAvailableButton","cursor","lowercase","checkAvailability","CFaAddressCard","FaAddressCard","SignupFormView","handleSignup","SubmitButton","isLoading","maxlength","SignupForm","signupInfo","finally","App","path","root","combineReducers","notesReducer","loginReducer","signupReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render"],"mappings":"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","file":"static/js/main.093fabda.chunk.js","sourcesContent":["const DEFAULT_DURATION = 3000;\n\nexport const noteToasts = (() => {\n    const notLoggedIn = {\n        description: 'You need to be logged in to add notes',\n        status: 'error' as const,\n        duration: DEFAULT_DURATION,\n        isClosable: true,\n    };\n\n    const noteTooShort = {\n        description: 'Note is too short!',\n        status: 'error' as const,\n        duration: DEFAULT_DURATION,\n        isClosable: true\n    };\n\n    const failedGet = {\n        description: `Failed to get notes, please check your network`,\n        status: 'error' as const,\n        duration: DEFAULT_DURATION,\n        isClosable: true,\n    };\n\n    const failedCreate = {\n        description: `Failed to create note`,\n        status: 'error' as const,\n        duration: DEFAULT_DURATION,\n        isClosable: true,\n    };\n\n    return {\n        notLoggedIn,\n        noteTooShort,\n        failedGet,\n        failedCreate\n    };\n})();","import { Credentials, TokenData } from \"../types\";\n\nexport const parseTokenData = (value: unknown): TokenData => { //Fix this?\n    if (!value || !isTokenData(value)) throw new Error(`Invalid or missing token`);\n    return value;\n};\n\nexport const parseCredentials = (value: unknown): Credentials => {\n    if (isCredentials(value)) {\n        return {\n            username: value.username,\n            password: value.password\n        };\n    } else {\n        throw new Error(`Invalid username or password`);\n    }\n};\n\nexport const isTokenData = (value: unknown): value is TokenData => {\n    if (value && typeof value === 'object') {\n        return 'token' in value\n            && 'username' in value\n            && 'name' in value;\n    }\n    return false;\n};\n\nconst isCredentials = (value: unknown): value is Credentials => {\n    if (value && typeof value === 'object') {\n        if ('username' in value && 'password' in value) return true;\n    }\n    return false;\n};","import axios, { AxiosError } from 'axios';\nimport { Credentials, TokenData } from '../types';\n\nconst baseUrl = '/api/login';\n\nconst login = async (credentials: Credentials) => {\n    try {\n        console.log(`logging in`);\n        const { data } = await axios.post<TokenData>(baseUrl, {...credentials});\n        return data;\n    } catch(e) {\n        throw new Error((e as AxiosError).response?.data.error);\n        \n    }\n};\n\nexport default {\n    login,\n};","import { TokenData, ActionPayload } from \"../../types\";\nimport { parseCredentials, parseTokenData, isTokenData } from \"../../validators/loginValidators\";\nimport { AppDispatch } from \"../store\";\nimport loginService from '../../services/loginService';\n\nconst reducer = (state = {}, { type, payload }: ActionPayload) => {\n    const localStorage = window.localStorage;\n\n    switch(type) {\n        case 'login/init': {\n            if (isTokenData(payload)) return {...payload};\n            return {...state};\n        }\n        case 'login/storeToken': {\n            if (isTokenData(payload)) {\n                localStorage.setItem('tokenData', JSON.stringify(payload));\n                return {...payload};\n            } else {\n                console.error(`Missing or invalid token after login, cannot set to localStorage`);\n            }\n            return {...state};\n        }\n        case 'login/logout': {\n            localStorage.removeItem('tokenData');\n            return {};\n        }\n        default: return {...state};\n    }\n};\n\nexport const logout = () => (dispatch: AppDispatch) => {\n    const name = getStoredToken()?.name;\n    if (name) {\n        dispatch({\n            type: 'login/logout',\n            payload: {}\n        });\n    }\n};\n\nexport const saveTokenToState = () => (dispatch: AppDispatch) => {\n    const user = getStoredToken();\n    if (user) {\n        dispatch({\n            type: 'login/init',\n            payload: user\n        });\n    }\n};\n\nexport const saveTokenToLocalStorage = (token: TokenData) => (dispatch: AppDispatch) => {\n    dispatch({\n        type: 'login/storeToken',\n        payload: token\n    });\n};\n\nexport const login = (loginInfo: unknown) => async (dispatch: AppDispatch) => {\n    const credentials = parseCredentials(loginInfo);\n    const token = await loginService.login(credentials);\n\n    if (!isTokenData(token)) {\n        throw new Error(`Invalid username or password`);\n    }\n\n    dispatch({\n        type: 'login/storeToken',\n        payload: token\n    });\n    \n    dispatch({\n        type: 'login/init',\n        payload: token\n    });\n    return token;\n};\n\nexport const getStoredToken = (): TokenData | null => {\n    const localStorage = window.localStorage;\n    const userString = localStorage.getItem('tokenData');\n\n    if (!userString) return null; //To check against empty localStorage value\n\n    const userLogin: unknown = JSON.parse(userString);\n\n    return parseTokenData(userLogin);\n};\n\nexport const userIsLoggedIn = () => {\n    return (Boolean(getStoredToken()));\n};\n\nexport default reducer;","import axios, { AxiosError } from 'axios';\nimport { Note, NewNote, NoteIdPosition } from '../types';\nimport { getStoredToken } from '../state/reducers/login';\n\nconst baseUrl = '/api/notes';\n\nexport const UPDATE_POSITION = \"POSITION\";\nexport const UPDATE_CONTENT = \"CONTENT\";\ntype UpdateType = typeof UPDATE_POSITION | typeof UPDATE_CONTENT;\n\nconst update = async (toUpdate: NoteIdPosition[] | Note, type: UpdateType) => {\n    let url = baseUrl;\n    switch(type) {\n        case UPDATE_POSITION: {\n            url += '/position';\n            break;\n        }\n        case UPDATE_CONTENT: {\n            url += '/content';\n            break;\n        }\n        default: {\n            const _exhaustiveCheck: never = type;\n            return _exhaustiveCheck;\n        }\n    }\n    const response = await axios.put(url, toUpdate);\n    return response;\n};\n\nconst getAll = async () => {\n    const tokenData = getStoredToken();\n    if (tokenData) {\n        const header = {headers: {'authorization': tokenData.token}};\n        \n        const { data: notes } = await axios.get<Note[]>(\n            baseUrl,\n            header\n        );\n        return notes;\n    } else return null;\n};\n\nconst addNew = async (note: NewNote) => {\n    const tokenData = getStoredToken();\n    try {\n        if (tokenData) {\n            const body = {\n                note, \n                token: tokenData.token\n            };\n\n            const { data } = await axios.post<Note>(baseUrl, body);\n\n            return data;\n        } else throw new Error(`Failed to add note, user currently not logged in`);\n    } catch(e) {\n        throw new Error((e as AxiosError).response?.data);\n    }\n    \n};\n\n//Note deletion fails from here onwards\nconst remove = async (noteId: string, toUpdate: NoteIdPosition[]) => { \n    const tokenData = getStoredToken();\n    if (tokenData) {\n        const data = tokenData.token;\n        const response = await axios.delete(\n            `${baseUrl}/${noteId}`,\n            {data: {\n                token: data,\n                toUpdate\n            }}\n        );\n        return response;\n    } else {\n        throw new Error(`Failed to delete note, user currently not logged in`);\n    }\n};\n\nexport default {\n    getAll,\n    addNew,\n    remove,\n    update\n};","\nexport const parseString = (value: unknown, errorMsg?: string): string => {\n    if (!value || !isString(value)) {\n        if (errorMsg) throw new Error(errorMsg);\n        else throw new Error(`Invalid or missing string: ${JSON.stringify(value)}`);\n    }\n    return value;\n};\n\nexport const isString = (value: unknown): value is string => {\n    return typeof value === 'string' || value instanceof String;\n};\n\nexport const isStringAndExists = (value: unknown): value is string => { //Tested, works properly\n    if (!value && !(typeof value === 'string')) return false;\n    else if (!isString(value)) return false;\n    return true;\n};\n\nexport default {\n    isString,\n    isStringAndExists\n};","import { Note, NewNote, PositionPayload, NoteIdPosition, UpdatePayload } from '../types';\nimport parser from './parsers';\n\nexport const isNewNote = (value: unknown): value is NewNote => {\n    if (!value) return false;\n    else if (!parser.isStringAndExists((value as NewNote).content)) return false;\n    else if (!parser.isStringAndExists((value as NewNote).created) \n        || !isDate((value as NewNote).created)) return false;\n    else if (!parser.isStringAndExists((value as NewNote).position)) return false;\n    return true;\n};\n\nexport const isNote = (value: unknown): value is Note => {\n    if (!value) return false;\n    if (!parser.isStringAndExists((value as Note)._id)) return false;\n    else if (!isNewNote(value)) return false;\n    return true;\n};\n\nexport const isUpdatePayload = (value: unknown): value is UpdatePayload => {\n    if (!value) return false;\n    if (!parser.isStringAndExists((value as UpdatePayload).match)) return false;\n    return isNote((value as UpdatePayload).note);\n};\n\nexport const isNoteAndExists = (value: unknown): boolean => {\n    if (!value) return false;\n    else if (!isNote(value)) return false;\n\n    return true;\n};\n\nexport const isNotesArray = (value: unknown): value is Note[] => {\n    return Array.isArray(value) && value.every(isNote);\n};\n\nexport const createTempNoteId = () => {\n    return JSON.stringify(Math.round(Math.random() * 100000000));\n};\n\nexport const isPositionPayload = (value: unknown): value is PositionPayload => {\n    if (value) {\n        const payload = (value as PositionPayload);\n\n        if ('activeIndex' in payload && typeof payload.activeIndex === 'number'\n        && 'overIndex' in payload && typeof payload.overIndex === 'number') return true;\n    }\n    return false;\n};\n\nconst isDate = (value: string): boolean => {\n    return Boolean(Date.parse(value));\n};\n\nexport const parseNotePositions = (notes: Note[]): NoteIdPosition[] => {\n    const parsed = [] as NoteIdPosition[];\n\n    for (let i = 0; i < notes.length; i++) {\n        const note = notes[i];\n        const notePositionWithId = {\n            _id: note._id,\n            position: note.position,\n        };\n        parsed.push(notePositionWithId);\n    }\n    return parsed;\n};","export const incrementNumberString = (value: string) => {\n    return JSON.stringify(Number(value) + 1);\n};\n\nexport const decrementNumberString = (value: string) => {\n    return JSON.stringify(Number(value) - 1);\n};\n\nexport const isBetween = (num: number, min: number, max: number) => {\n    return num >= min && num <= max;\n};","import notesService, { UPDATE_CONTENT, UPDATE_POSITION } from \"../../services/notesService\";\nimport { Note, NewNote } from \"../../types\";\nimport { createTempNoteId, isNote, isNotesArray, isUpdatePayload, parseNotePositions } from \"../../validators/noteValidators\";\nimport parser from '../../validators/parsers';\nimport { AppDispatch, AppGetState } from \"../store\";\nimport { ActionPayload } from '../../types';\nimport { arrayMove } from \"@dnd-kit/sortable\";\nimport { decrementNumberString, incrementNumberString, isBetween } from \"../../utils/computations\";\n\nconst FIRST_NOTE_ID = '0' as string;\n\nconst reducer = (state = [] as Note[], { type, payload }: ActionPayload) => {\n    switch(type) {\n        case 'notes/initialize': {\n            if (isNotesArray(payload)) {\n                return [...payload];\n            } else {\n                return [...state];\n            }\n        }\n        case 'notes/remove': {\n            if (parser.isStringAndExists(payload)) {\n                const id = payload;\n                const newState = filterOutNote(state, id);\n                return newState;\n            } else {\n                console.error(`Failed deletion of note state`);\n                return [...state];\n            }\n        }\n        case 'notes/create': {\n            if (isNote(payload)) {\n                return [\n                    ...state,\n                    payload\n                ];\n            } else {\n                console.error(`Failed adding created note to state`);\n                return [...state];\n            }\n        }\n        case 'notes/updateOne': {\n            if (isUpdatePayload(payload)) {\n                const notes = [...state];\n                const index = notes.findIndex(note => note._id === payload.match);\n                notes[index] = payload.note;\n                return notes;\n            } else {\n                console.error(`Payload in notes/updateOne reducer is not an UpdatePayload`);\n                return [...state];\n            }\n        }\n        case 'notes/updateArray': {\n            if (isNotesArray(payload)) {\n                return [...payload];\n            } else {\n                console.error(`Failed to update notes in notes reducer`);\n                return [...state];\n            }\n        }\n        case 'notes/clear': {\n            return [];\n        }\n        default: \n            return [...state];\n    }\n};\n\nconst filterOutNote = (notes: Note[], idToFilter: string) => {\n    return notes.filter((note: Note) => note._id !== idToFilter);\n};\n\n\nexport const editNote = (edited: Note) => async (dispatch: AppDispatch) => {\n    dispatch({\n        type: 'notes/updateOne',\n        payload: {\n            match: edited._id,\n            note: edited\n        }\n    });\n\n    try {\n        const updated = await notesService.update(edited, UPDATE_CONTENT);\n        return updated;\n    } catch(e) {\n        console.error(`Error deleting note: ${(e as Error).message}`);\n    }\n};\n\n\n//updates note.position values of the moved notes\n//note.position is used to track the position of the notes for the MongoDB database\n//arrayMove from dnd-kit only moves the notes in the store, with no way to track the \n// changes in position\nconst updatePositionsSorted = (moved: Note[], activeIndex: number, overIndex: number) => {\n    const changedNotes = [] as Note[];\n    if (overIndex > activeIndex) { //dragged vertically downwards\n        // for loops are much faster than callback function-based loops\n        for (let i = 0; i < moved.length; i++) {\n            const note = moved[i];\n            //Because the note was dragged downwards, all notes that the dragged note passed \n            // through will have its position in the notes array reduced by 1\n            if (isBetween(Number(note.position), activeIndex + 1, overIndex)) {\n                note.position = decrementNumberString(note.position);\n                changedNotes.push(note);\n            }\n        }\n    } else if (overIndex < activeIndex) { //dragged vertically upwards\n        for (let i = 0; i < moved.length; i++) {\n            const note = moved[i];\n            if (isBetween(Number(note.position), overIndex, activeIndex - 1)) {\n                note.position = incrementNumberString(note.position);\n                changedNotes.push(note);\n            }\n        }\n    }\n\n    //Finally updates the position value of the moved note itself\n    moved[overIndex].position = JSON.stringify(overIndex);\n    changedNotes.push(moved[overIndex]); \n\n    return {\n        updated: moved,\n        changedNotes\n    };\n};\nconst moveArray = <Type>(toMove: Type[], activeIndex: number, overIndex: number) => {\n    return [...arrayMove(toMove, activeIndex, overIndex)];\n};\nconst updatePositionsSortedInDb = async (notes: Note[]) => {\n    const positions = parseNotePositions(notes);\n    const updated = await notesService.update(positions, UPDATE_POSITION);\n    return updated;\n};\nexport const sortNote = (activeIndex: number, overIndex: number) => \nasync (dispatch: AppDispatch, getState: AppGetState) => {\n    const original = getState().notes;\n    const moved = moveArray<Note>(original, activeIndex, overIndex);\n\n    //updatedNotes=array of only notes that had position fields changed\n    const { updated, changedNotes } = updatePositionsSorted(moved, activeIndex, overIndex);\n\n    dispatch({\n        type: 'notes/updateArray',\n        payload: updated\n    });\n\n    await updatePositionsSortedInDb(changedNotes);\n};\n\n\nconst updatePositionsDeleted = (notes: Note[], deletedPosition: string) => {\n    const changedNotes = [] as Note[];\n    for(let i = 0; i < notes.length; i++) {\n        const note = notes[i];\n        if (Number(note.position) > Number(deletedPosition)) {\n            note.position = JSON.stringify(Number(note.position) - 1);\n            changedNotes.push(note);\n        }\n    }\n\n    return {\n        updated: notes,\n        changedNotes\n    };\n};\nexport const removeNote = (note: Note) => async (dispatch: AppDispatch, getState: AppGetState) => {\n    try {\n        const notes = [...getState().notes];\n        const deletedPosition = note.position;\n\n        const { updated, changedNotes } = updatePositionsDeleted(notes, deletedPosition);\n        const positions = parseNotePositions(changedNotes);\n\n        dispatch({\n            type: 'notes/updateArray',\n            payload: updated\n        });\n\n        dispatch({\n            type: 'notes/remove',\n            payload: note._id\n        });\n\n        await notesService.remove(note._id, positions);\n    } catch(e) {\n        console.error(`Error deleting note: ${(e as Error).message}`);\n    }\n};\n\n\nexport const clearNotes = () => (dispatch: AppDispatch) => {\n    dispatch({\n        type: 'notes/clear',\n    });\n};\n\nexport const initializeNotes = () => async (dispatch: AppDispatch) => {\n    const notes = await notesService.getAll();\n    dispatch({\n        type: 'notes/initialize',\n        payload: notes\n    });\n};\n\nexport const createNote = (content: string) => \nasync (dispatch: AppDispatch, getState: AppGetState) => {\n    const lastNote = getState().notes.at(-1);\n\n    const newNote: NewNote = {\n        content,\n        created: new Date().toString(),\n        position: lastNote \n            ? JSON.stringify(Number(lastNote.position) + 1)\n            : FIRST_NOTE_ID\n    };\n\n    const temp_id = createTempNoteId();\n\n    try {\n        //Note-creation is implemented in such a way that note-adding is instantaneous, instead\n        // of waiting for a response from the backend\n        dispatch({\n            type: 'notes/create',\n            payload: {\n                ...newNote,\n                _id: temp_id\n            }\n        });\n\n        const noteWithId = await notesService.addNew(newNote); \n        dispatch({\n            type: 'notes/remove',\n            payload: temp_id\n        });\n        dispatch({\n            type: 'notes/create',\n            payload: noteWithId\n        });\n    } catch(e) {\n        console.error(`Error adding note: ${(e as Error).message}`);\n    }\n};\n\nexport default reducer;","import { Breadcrumb, BreadcrumbItem, BreadcrumbLink } from '@chakra-ui/react';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => {\n    const navStyle = {\n        \"separator\": \"-\",\n        \"fontWeight\": \"medium\",\n        \"fontSize\": \"25px\",\n        \"fontFamily\": \"flexa\",\n    };\n\n    return (\n        <Breadcrumb {...navStyle}>\n            <BreadcrumbItem>\n                <BreadcrumbLink as={Link} to='/' d=\"inline\">Home</BreadcrumbLink>\n            </BreadcrumbItem>\n\n            <BreadcrumbItem>\n                <BreadcrumbLink as={Link} to='/notes' d=\"inline\">Notes</BreadcrumbLink>\n            </BreadcrumbItem>\n\n            <BreadcrumbItem>\n                <BreadcrumbLink as={Link} to='/pad' d=\"inline\">Pad</BreadcrumbLink>\n            </BreadcrumbItem>\n\n            <BreadcrumbItem>\n                <BreadcrumbLink as={Link} to='/user' d=\"inline\">User</BreadcrumbLink>\n            </BreadcrumbItem>\n\n            <BreadcrumbItem>\n                <BreadcrumbLink as={Link} to='/about' d=\"inline\">About</BreadcrumbLink>\n            </BreadcrumbItem>\n        </Breadcrumb>\n    );\n};\n\nexport default NavBar;","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nconst Home = () => {\n    const fontStyle = {\n        'fontFamily': '\"Lato\",  sans serif',\n        'fontSize': '16px',\n    };\n\n    return (\n        <Box {...fontStyle}>\n            <h3><i>Notes app, by Chiew Weng Keat</i></h3>\n            <p>\n                &emsp; total notes stored: <br />\n                &emsp; total users:\n            </p>\n        </Box>\n    );\n};\n\nexport default Home;","import { Skeleton, SkeletonCircle } from '@chakra-ui/react';\nimport React from 'react';\n\nconst SkeletonList = ({ rows }: { rows: number }) => {\n    const rowStyle = {\n        'height': '26px',\n        'width': '500px',\n        'alignSelf': 'center'\n    };\n\n    const list = [];\n    for (let i = 0; i < rows; i++) {\n        list.push(\n            <React.Fragment key={i}>\n                <Skeleton style={rowStyle} />\n                <SkeletonCircle visibility='hidden' />\n                <SkeletonCircle visibility='hidden'/>\n            </React.Fragment>);\n    }\n    return (\n        <>{list}</>\n    );\n};\n\nexport default SkeletonList;","\nimport { ActionPayload } from '../../types';\nimport { isString } from '../../validators/parsers';\nimport { AppDispatch } from '../store';\n\nconst baseEditType = 'noteActionViews/editing';\n\ninterface ActionState {\n    isEditing: boolean,\n    noteId: string | null,\n}\nconst reducer = (state = {isEditing: false, noteId: null} as ActionState, { type, payload }: ActionPayload) => {\n    switch(type) {\n        case `${baseEditType}/set`: {\n            if (isString(payload)) {\n                return {...state, isEditing: true, noteId: payload};\n            } else {\n                console.log(`Invalid noteId: ${JSON.stringify(payload)}`);\n                return {...state};\n            }\n        }\n        case `${baseEditType}/reset`: {\n            return {...state, isEditing: false, noteId: null};\n        }\n        default: return {...state};\n    }\n};\n\n\nexport const setEditMode = (noteId: string) => (dispatch: AppDispatch) => {\n    dispatch({\n        type: `${baseEditType}/set`,\n        payload: noteId\n    });\n};\n\nexport const stopEditMode = () => (dispatch: AppDispatch) => {\n    dispatch({type: `${baseEditType}/reset`});\n};\n\nexport default reducer;","import { IconButton, chakra } from '@chakra-ui/react';\nimport React from 'react';\nimport { AiFillEdit } from 'react-icons/ai';\nimport { useDispatch } from 'react-redux';\nimport { setEditMode } from '../../state/reducers/noteActionViews';\nimport { Note } from '../../types';\n\nconst CAiFillEdit = chakra(AiFillEdit);\n\ninterface ViewProps {\n    handleEdit: (e: React.FormEvent) => void,\n    isEditing: boolean,\n}\nconst EditButtonView = ({ handleEdit, isEditing }: ViewProps) => {\n    const buttonStyle = {\n        \"bgColor\": isEditing ? \"gray.400\" : \"transparent\",\n        \"borderRadius\": \"full\",\n        \"size\": \"sm\",\n        \"_hover\": {\n            \"bgColor\": \"gray.400\"\n        },\n        \"title\": \"edit\",\n        \n    };\n\n    return (\n        <IconButton \n            {...buttonStyle}\n            aria-label='edit note' \n            icon={<CAiFillEdit />} \n            onClick={handleEdit} />\n    );\n};\n\ninterface ButtonProps {\n    note: Note,\n    isEditing: boolean,\n}\nconst EditButton = ({ note, isEditing }: ButtonProps) => {\n    const dispatch = useDispatch();\n\n    const handleEdit = (e: React.FormEvent) => {\n        e.preventDefault();\n        dispatch(setEditMode(note._id));\n    };\n\n    return (\n        <EditButtonView \n            isEditing={isEditing}\n            handleEdit={handleEdit} />\n    );\n};\n\nexport default EditButton;","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { IconButton } from '@chakra-ui/react';\n\nimport { removeNote } from '../../state/reducers/notes';\nimport { Note } from '../../types';\n\ninterface ViewProps {\n    handleDelete: (e: React.FormEvent) => void;\n    toggleHighlight: () => void;\n}\nconst DeleteButtonView = ({ handleDelete, toggleHighlight }: ViewProps) => {\n    const buttonStyle = {\n        \"color\": \"black\",\n        \"borderRadius\": \"full\",\n        \"bgColor\": \"transparent\",\n        \"size\": \"sm\",\n        \"_hover\": {\n            \"color\": \"white\",\n            \"bgColor\": \"red.900\"\n        },\n        \"title\": \"delete\",\n    };\n\n    return (\n        <IconButton\n            {...buttonStyle}\n            aria-label='delete'\n            icon={<DeleteIcon/>}\n            onClick={handleDelete}\n            onMouseOver={toggleHighlight}\n            onMouseOut={toggleHighlight}\n            >delete\n        </IconButton>\n    );\n};\n\nconst DeleteButton = ({ note }: { note: Note }) => {\n    const dispatch = useDispatch();\n\n    const handleDelete = (e: React.FormEvent) => {\n        e.preventDefault();\n        dispatch(removeNote(note));\n    };\n\n    const toggleHighlight = () => {\n        const noteContent = document.getElementById(note._id);\n        if (noteContent) {\n            switch(noteContent.style.color) {\n                case 'red': {\n                    noteContent.style.color = '';\n                    break;\n                }\n                case '': {\n                    noteContent.style.color = 'red';\n                    break;\n                }\n                default: break;\n            }\n        }\n    };\n\n    return (\n        <DeleteButtonView \n            handleDelete={handleDelete} \n            toggleHighlight={toggleHighlight}/>\n    );\n};\n\nexport default DeleteButton;","import React, { useEffect, useRef, useState } from 'react';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { Note } from '../../types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../state/store';\nimport { Box, Button, Center, FormControl, Textarea } from '@chakra-ui/react';\nimport EditButton from './EditButton';\nimport DeleteButton from './DeleteButton';\nimport { stopEditMode } from '../../state/reducers/noteActionViews';\nimport autosize from 'autosize';\nimport { editNote } from '../../state/reducers/notes';\n\nconst EditTextarea = ({ note }: { note: Note }) => {\n    const textareaStyle = {\n        height: \"32px\",\n        padding: \"0px\",\n        verticalAlign: \"top\",\n        overflow: 'hidden',\n    };\n\n\n    const dispatch = useDispatch();\n    const [edited, setEdited] = useState(note.content);\n    const textarea = useRef(null);\n\n    //When note is sorted, the note parameter changes, but edited maintains its \n    // original note.content's value, before the sort \n    //This line updates the value of edited every time the note is sorted\n    useEffect(() => {\n        setEdited(note.content);\n    }, [note.content]);\n\n\n    const saveNote = (e: React.FormEvent) => {\n        e.preventDefault();\n        dispatch(stopEditMode());\n        if (edited === note.content) return;\n\n        const toSave: Note = {...note, content: edited};\n        dispatch(editNote(toSave));\n    };\n\n    // const [keysPressed, setKeysPressed] = useState([] as string[]);\n    // const handleKeyDown = (event: React.KeyboardEvent) => {\n    //     setKeysPressed([...keysPressed, event.key]);\n    // };\n    // const handleKeyUp = (event: React.KeyboardEvent) => {\n\n    //     if (keysPressed.some(key => key === 'Shift') && event.key === 'Enter') {\n    //         console.log(`keysPressed called`);\n    //     }\n\n    //     setKeysPressed(keysPressed.filter(key => key !== event.key));\n    // };\n\n    return (\n        <FormControl as=\"form\" onSubmit={saveNote}>\n            <Textarea \n                ref={textarea}\n                as=\"textarea\"\n                id={note._id}\n                style={textareaStyle}\n                autoFocus\n                autoComplete=\"off\"\n                value={edited}\n                rows={1}\n                spellCheck={false}\n                onChange={(e) => setEdited(e.currentTarget.value)}\n                onBlur={saveNote}\n                >\n            </Textarea>\n            <Button style={{display: \"none\"}} />\n        </FormControl>\n    );\n};\n\nconst NoteRowSortable = ({ note }: { note: Note }) => {\n    const {\n        setNodeRef,\n        attributes,\n        listeners,\n        transition,\n        transform,\n    } = useSortable({ id: note.position });\n\n    const sortableStyle = {\n        transition,\n        transform: transform\n            ? `translate3d(${transform?.x}px, ${transform?.y}px, 0)`\n            : undefined\n    };\n    \n    //Subscribes to when EditButton is pressed\n    const actionTracker = useSelector((state: RootState) => state.noteActionViews);\n    const isBeingEdited = actionTracker.isEditing && actionTracker.noteId === note._id;\n    \n    const content = (\n        <Box id={note._id}\n            ref={setNodeRef} \n            {...attributes} \n            {...listeners} \n            style={sortableStyle}>\n                {note.content}\n        </Box>\n    );\n\n    const contentNode = isBeingEdited\n        ? <EditTextarea note={note} />\n        : content;\n\n    useEffect(() => {\n        if (isBeingEdited) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            autosize(document.querySelector('textarea')!);\n        }\n    }, [isBeingEdited]);\n\n    return (\n        <React.Fragment key={note._id}>\n            {contentNode}\n            <Center>\n                <EditButton note={note} isEditing={isBeingEdited} />\n            </Center>\n            <Center>\n                <DeleteButton note={note} />\n            </Center>\n        </React.Fragment>\n    );\n};\n\nexport default NoteRowSortable;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../state/store';\n\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { restrictToParentElement, restrictToVerticalAxis } from '@dnd-kit/modifiers'; \nimport { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\n\nimport { Note } from '../../types';\nimport { Grid } from '@chakra-ui/react';\n\nimport { sortNote } from '../../state/reducers/notes';\nimport { getStoredToken } from '../../state/reducers/login';\n\nimport SkeletonList from './SkeletonList';\nimport NoteRowSortable from './NoteRowSortable';\n\nconst NotesList = () => {\n    const notes: Note[] = useSelector((state: RootState) => state.notes);\n    const dispatch = useDispatch();\n\n    const gridStyle = {\n        \"mt\": \"1\",\n        \"templateColumns\": \"minmax(auto, 600px) 30px 30px\",\n        \"autoRows\": \"min-max(32px, max-content)\",\n        \"rowGap\": \"5px\",\n    };\n    const noteStyle = {\n        'fontFamily': '\"Lato\",  sans serif',\n        'fontSize': '16px'\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleDragEnd = ({ active, over }: { active: any, over: any}) => {\n        if (!active || !over) return;\n        const activeIndex = notes.findIndex(note => note.position === active.id);\n        const overIndex = notes.findIndex(note => note.position === over.id);\n\n        // if(note was actually moved)\n        if(activeIndex !== overIndex) dispatch(sortNote(activeIndex, overIndex));\n        else return;\n    };\n\n    const theList = getStoredToken() && notes.length === 0\n        ? <SkeletonList rows={5} />\n        : notes.map(note => <NoteRowSortable note={note} key={note.position} />);\n\n    return (\n        <Grid {...gridStyle} {...noteStyle}>\n            <DndContext \n            onDragEnd={handleDragEnd} \n            modifiers={[restrictToVerticalAxis, restrictToParentElement]}\n            collisionDetection={closestCenter}>\n                <SortableContext \n                items={notes.map(note => note.position)} \n                strategy={verticalListSortingStrategy}>\n                    {theList}\n                </SortableContext>\n            </DndContext>\n        </Grid>\n    );\n};\n\nexport default NotesList;","import React, { useState } from 'react';\n\nexport const useField = (type: string, initial = '') => {\n    const [value, setValue] = useState(initial);\n    const onChange = \n        (event: React.FormEvent<HTMLInputElement>) => setValue(event.currentTarget.value);\n\n    const clearField = () => setValue('');\n\n    return {\n        type,\n        value,\n        onChange,\n        clearField\n    };\n};\n\nexport const useTimeout = () => {\n    let timeoutId: null | NodeJS.Timeout = null;\n    // const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout>();\n\n    const set = (func: unknown, timeout: number) => {\n        if (func instanceof Function) {\n            const id = setTimeout(func, timeout) as unknown as NodeJS.Timeout;\n            timeoutId = id;\n        }\n    };\n    \n    const clear = () => {\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n            timeoutId = null;\n        }\n    };\n\n    return {\n        set,\n        clear\n    };\n};","import React, { forwardRef, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { createNote } from '../../state/reducers/notes';\nimport { useField } from '../../utils/hooks';\n\nimport { Input, Button, FormControl, useToast } from \"@chakra-ui/react\";\nimport { noteToasts as toasts } from '../../utils/toasts/notes';\nimport { UseField } from '../../types';\nimport { userIsLoggedIn } from '../../state/reducers/login';\n\ntype FormViewProps = {\n    onSubmit(e: React.FormEvent): void,\n    noteInput: UseField,\n};\nconst NoteFormView = \n    forwardRef<HTMLInputElement, FormViewProps>(({ onSubmit, noteInput }, ref) => {\n    const inputStyle = {\n        \"placeholder\": \"new note...\",\n        \"size\": \"sm\",\n        \"w\": 350,\n        \"variant\": \"filled\",\n        \"borderRadius\": \"2xl\",\n        \"m\": 1.5,\n        \"ml\": -0.5,\n        \"colorScheme\": \"facebook\",\n        \"autoComplete\": \"off\",\n    };\n\n    const buttonStyle = {\n        \"size\": \"xs\",\n        \"bgColor\": \"black\",\n        \"color\": \"white\",\n        \"colorScheme\": \"twitter\",\n        \"_hover\": {\n            \"bgColor\": \"gray.600\"\n        },\n        \"title\": \"save new note\"\n    };\n\n    return (\n        <FormControl as=\"form\" onSubmit={onSubmit}>\n            <Input ref={ref} {...inputStyle} {...noteInput}></Input>\n            <Button {...buttonStyle}>save</Button>\n        </FormControl>\n    );\n});\n\nconst NoteForm = () => {\n    const noteInput = useField('text');\n    const dispatch = useDispatch();\n    const toast = useToast();\n\n    const addNote = (e: React.FormEvent) => {\n        e.preventDefault();\n        if (noteInput.value.length < 4) return;\n        else if (!userIsLoggedIn()) {\n            toast(toasts.notLoggedIn);\n            return;\n        } \n\n        try {\n            dispatch(createNote(noteInput.value));\n            noteInput.clearField();\n        } catch(e) {\n            console.error((e as Error).message);\n            toast(toasts.failedCreate);\n        }\n    };\n\n    const formInput = useRef<HTMLInputElement>(null);\n    const addSlashListener = () => {\n        document.addEventListener('keyup', (event) => {\n            if (event.code === 'Slash' && formInput.current && !document.activeElement?.id) {\n                formInput.current.focus();\n            }\n        });\n    };\n    addSlashListener();\n\n    return <NoteFormView ref={formInput} onSubmit={addNote} noteInput={noteInput} />;\n};\n\nexport default NoteForm;","import React from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\n\nimport 'tinymce/tinymce';\nimport 'tinymce/plugins/advlist';\nimport 'tinymce/plugins/autolink';\nimport 'tinymce/plugins/lists';\nimport 'tinymce/plugins/link';\nimport 'tinymce/plugins/image';\nimport 'tinymce/plugins/charmap';\nimport 'tinymce/plugins/print';\nimport 'tinymce/plugins/preview';\nimport 'tinymce/plugins/anchor';\nimport 'tinymce/plugins/help';\nimport 'tinymce/plugins/searchreplace';\nimport 'tinymce/plugins/visualblocks';\nimport 'tinymce/plugins/insertdatetime';\nimport 'tinymce/plugins/media';\nimport 'tinymce/plugins/table';\nimport 'tinymce/plugins/code';\nimport 'tinymce/plugins/textcolor';\nimport 'tinymce/icons/default';\nimport 'tinymce/skins/ui/oxide/skin.min.css';\nimport 'tinymce/skins/ui/oxide/content.min.css';\nimport 'tinymce/themes/silver';\nimport { Box } from '@chakra-ui/react';\n\nconst Pad = () => {\n    const handleEditorChange = (e: { target: { getContent: () => void; }; }) => {\n        console.log(`Content was updated: ${e.target.getContent()}`);\n        e.target.getContent();\n    };\n\n    const editorStyle = {\n        \"mt\": 2,\n    };\n\n    return (\n        <Box {...editorStyle}>\n            <Editor\n                apiKey=\"qtitdvrlkre0paqdsjf5y2ov79vqbc0bp9s9oji0y102hol2\"\n                init={{\n                    skin: false,\n                    height: 500,\n                    menubar: false,\n                    plugins: [\n                        'advlist autolink lists link image',\n                        'charmap print preview anchor help textcolor',\n                        'searchreplace visualblocks code',\n                        'insertdatetime media table',\n                    ],\n                    statusbar: false,\n                    toolbar:\n                        'undo redo | bold italic |\\\n                        underline strikethrough | superscript subscript charmap code |\\\n                        alignleft aligncenter alignright alignjustify |\\\n                        bullist numlist outdent indent |\\\n                        link image media table | forecolor backcolor |\\\n                        removeformat fontsizeselect help',\n                    toolbar_mode: 'wrap',\n                    content_css: \"./pad.css\",\n                    width: 1020,\n                    branding: false\n                }}\n                onChange={handleEditorChange} />\n        </Box>\n    );\n};\n\nexport default Pad;","import { AppDispatch } from \"../store\";\n\nconst baseLoginType = 'userFormViews/loginForm';\nconst baseSignupType = 'userFormViews/signupForm';\n\nconst reducer = (state = \n    {loginForm: false, \n        loginSpinner: false,\n        signupForm: false,\n        signupSpinner: false}, \n    { type }: { type: string }) => {\n    switch(type) {\n        case `${baseLoginType}/toggle`: {\n            return {...state, signupForm: false, loginForm: !state.loginForm};\n        }\n        case `${baseLoginType}/show`: {\n            return {...state, signupForm: false, loginForm: true};\n        }\n        case `${baseLoginType}/hide`: {\n            return {...state, loginForm: false};\n        }\n        case `${baseLoginType}/spinner/show`: {\n            return {...state, loginSpinner: true};\n        }\n        case `${baseLoginType}/spinner/hide`: {\n            return {...state, loginSpinner: false};\n        }\n        case `${baseSignupType}/toggle`: {\n            return {...state, loginForm: false, signupForm: !state.signupForm};\n        }\n        case `${baseSignupType}/show`: {\n            return {...state, loginForm: false, signupForm: true};\n        }\n        case `${baseSignupType}/hide`: {\n            return {...state, signupForm: false};\n        }\n        case `${baseSignupType}/spinner/show`: {\n            return {...state, signupSpinner: true};\n        }\n        case `${baseSignupType}/spinner/hide`: {\n            return {...state, signupSpinner: false};\n        }\n        default: return {...state};\n    }\n};\n\n\nexport const toggleLoginForm = () => (dispatch: AppDispatch) => {\n    dispatch({\n        type: `${baseLoginType}/toggle`\n    });\n};\n\nexport const showLoginForm = () => (dispatch: AppDispatch) => {\n    dispatch({\n        type: `${baseLoginType}/show`\n    });\n};\n\nexport const hideLoginForm = () => (dispatch: AppDispatch) => {\n    dispatch({\n        type: `${baseLoginType}/hide`\n    });\n};\n\nexport const showLoginSpinner = () => (dispatch: AppDispatch) => {\n    dispatch({\n        type: `${baseLoginType}/spinner/show`\n    });\n};\n\nexport const hideLoginSpinner = () => (dispatch: AppDispatch) => {\n    dispatch({\n        type: `${baseLoginType}/spinner/hide`\n    });\n};\n\nexport const toggleSignupForm = () => (dispatch: AppDispatch) => {\n    dispatch({\n        type: `${baseSignupType}/toggle`\n    });\n};\n\nexport const showSignupForm = () => (dispatch: AppDispatch) => {\n    dispatch({\n        type: `${baseSignupType}/show`\n    });\n};\n\nexport const hideSignupForm = () => (dispatch: AppDispatch) => {\n    dispatch({\n        type: `${baseSignupType}/hide`\n    });\n};\n\nexport const showSignupSpinner = () => (dispatch: AppDispatch) => {\n    dispatch({\n        type: `${baseSignupType}/spinner/show`\n    });\n};\n\nexport const hideSignupSpinner = () => (dispatch: AppDispatch) => {\n    dispatch({\n        type: `${baseSignupType}/spinner/hide`\n    });\n};\n\nexport default reducer;","const DEFAULT_DURATION = 3000;\n\nexport const loginToasts = (() => {\n    const failed = {\n        description: 'Login failed. Please try again',\n        status: 'error' as const,\n        duration: DEFAULT_DURATION,\n        isClosable: true\n    };\n\n    const success = (name: string) => {\n        return {\n            description: `logged in as ${name}`,\n            status: 'success' as const,\n            duration: DEFAULT_DURATION,\n            isClosable: true,\n        };\n    };\n\n    const error = (message: string) => {\n        return {\n            description: `${message}`,\n            status: 'error' as const,\n            duration: DEFAULT_DURATION,\n            isClosable: true,\n        };\n    };\n\n    return {\n        failed,\n        success,\n        error\n    };\n})();\n\nexport const logoutToasts = (() => {\n    const success = (name: string) => {\n        return {\n            description: `${name} logged out`,\n            status: 'success' as const,\n            duration: DEFAULT_DURATION,\n            isClosable: true,\n        };\n    };\n\n    const failed = (message: string) => {\n        return {\n            description: `Error logging out: ${message}`,\n            status: 'error' as const,\n            duration: DEFAULT_DURATION,\n            isClosable: true,\n        };\n    };\n\n    return {\n        success,\n        failed,\n    };\n})();","import React from 'react';\nimport { useField, useTimeout } from '../../utils/hooks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from '../../state/reducers/login';\nimport { RootState } from '../../state/store';\nimport { hideLoginSpinner, showLoginSpinner, toggleLoginForm } from '../../state/reducers/userFormViews';\nimport { LoginFormViewFields, TimeoutObject, TokenData } from '../../types';\nimport { isTokenData } from '../../validators/loginValidators';\n\nimport { loginToasts as toasts } from '../../utils/toasts/login';\nimport { initializeNotes } from '../../state/reducers/notes';\n\nimport {\n    Box,\n    Button, \n    FormControl, \n    Input, \n    Spinner, \n    useToast, \n    InputGroup,\n    InputLeftElement,\n    chakra,\n    Stack,\n    FormLabel\n} from '@chakra-ui/react';\n\nimport { FaUserAlt, FaLock } from 'react-icons/fa';\n\nconst LoginFormView = ({ handleLogin, username, password, showSpinner }: LoginFormViewFields) => {\n    const inputStyle = {\n        \"size\": \"sm\",\n        \"w\": 200,\n        \"variant\": \"filled\",\n        \"borderRadius\": \"xl\",\n    };\n\n    const buttonStyle = {\n        \"size\": \"xs\",\n        \"bgColor\": \"blue.300\",\n        \"display\": \"inline\"\n    };\n\n    const CFaUserAlt = chakra(FaUserAlt);\n    const CFaLock = chakra(FaLock);\n\n    return (\n        <FormControl as=\"form\" onSubmit={handleLogin}>\n            <FormLabel as='legend'>Login</FormLabel>\n            <Stack spacing={0.5}>\n                <InputGroup {...inputStyle}>\n                    <InputLeftElement\n                        pointerEvents='none'\n                        children={<CFaUserAlt />} />\n                    <Input {...username} {...inputStyle} placeholder='username' /> <br />\n                </InputGroup>\n                <InputGroup {...inputStyle}>\n                    <InputLeftElement\n                        pointerEvents='none'\n                        children={<CFaLock />} />\n                    <Input {...password} {...inputStyle} placeholder='password' />\n                </InputGroup>\n                <Box>\n                    <Button {...buttonStyle}>login</Button>\n                    <SpinnerView isVisible={showSpinner}/>\n                </Box>\n            </Stack>\n        </FormControl>\n    );\n};\n\nconst SpinnerView = ({isVisible}: {isVisible: boolean}) => {\n    const spinnerStyle = {\n        \"size\": \"sm\",\n        \"verticalAlign\": \"middle\",\n        \"margin\": \"7px\"\n    };\n\n    return (\n        isVisible \n            ? <Spinner {...spinnerStyle} />\n            : null\n    );\n};\n\nconst LoginForm = () => {\n    const dispatch = useDispatch();\n    const toast = useToast();\n\n    const formVisible = useSelector((state: RootState) => state.userFormViews.loginForm);\n    const spinnerVisible = useSelector((state: RootState) => state.userFormViews.loginSpinner);\n\n    const username = useField('text');\n    const password = useField('password');    \n\n    const clearInputFields = () => {\n        username.clearField();\n        password.clearField();\n    };\n\n    const clearToastsAndSpinner = (timeout: TimeoutObject) => {\n        timeout.clear();\n        dispatch(hideLoginSpinner());\n    };\n\n    const notifyIfTimedOut = (timeout: TimeoutObject) => {\n        const handleFailure = () => {\n            toast(toasts.failed);\n            dispatch(hideLoginSpinner());\n        };\n\n        timeout.set(handleFailure, 5000);\n    };\n\n    const handleLogin = (e: React.FormEvent) => {\n        e.preventDefault();\n        const timeout = useTimeout();\n\n        new Promise((resolve) => {\n            dispatch(showLoginSpinner());\n            notifyIfTimedOut(timeout);\n\n            const token = dispatch(login({\n                username: username.value,\n                password: password.value\n            })) as unknown as TokenData;\n            \n            resolve(token);\n        })\n        .then((token) => {\n            if (isTokenData(token)) {\n                clearToastsAndSpinner(timeout);\n                dispatch(initializeNotes());\n                toast(toasts.success(token.name));\n                clearInputFields();\n                dispatch(toggleLoginForm());\n            }\n        })\n        .catch((e) => {\n            clearToastsAndSpinner(timeout);\n            toast(toasts.error(e.message));\n        });\n    };\n\n    return (\n        <>\n            {formVisible\n                ? <LoginFormView \n                    handleLogin={handleLogin} \n                    username={username} \n                    password={password} \n                    showSpinner={spinnerVisible}/>\n                : null}\n        </>\n    );\n};\n\nexport default LoginForm;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showLoginForm } from '../../state/reducers/userFormViews';\nimport { getStoredToken, logout } from '../../state/reducers/login';\nimport { RootState } from '../../state/store';\nimport { SubmitHandler } from '../../types';\n\nimport { Button, useToast } from '@chakra-ui/react';\nimport { logoutToasts as toasts } from '../../utils/toasts/login';\nimport { clearNotes } from '../../state/reducers/notes';\n\nconst LogoutButtonView = ({ handleSubmit }: SubmitHandler) => {\n    const buttonStyle = {\n        \"size\": \"xs\",\n        \"fontSize\": \"12px\",\n        \"borderRadius\": \"6px\",\n        \"color\": \"black\",\n        \"bg\": \"red.500\",\n        \"_hover\": { \n            bg: \"red.800\",\n            color: \"white\"\n        },\n    };\n\n    return <Button onClick={handleSubmit} {...buttonStyle}>logout</Button>;\n};\n\nconst LogoutButton = () => {\n    const dispatch = useDispatch();\n    const toast = useToast();\n    const token = useSelector((state: RootState) => state.login);\n\n    const notifyLogout = (name: string | undefined) => {\n        if (name) toast(toasts.success(name));\n    };\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            const name = getStoredToken()?.name;\n            dispatch(logout());\n            dispatch(showLoginForm());\n            notifyLogout(name);\n            dispatch(clearNotes());\n        } catch(e) {\n            toast(toasts.failed((e as Error).message));\n        }\n    };\n\n    return (\n        Object.keys(token).length === 0\n            ? null\n            : <LogoutButtonView handleSubmit={handleSubmit} />\n    );\n};\n\nexport default LogoutButton;","import { Button } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface VisibilityToggler {\n    toggleVisibility: () => void \n}\nconst LoginButton = ({ toggleVisibility }: VisibilityToggler) => {\n\n    const handleToggle = (e: React.FormEvent) => {\n        e.preventDefault();\n        toggleVisibility();\n    };\n\n    const buttonStyle = {\n        \"size\": \"xs\",\n        \"bgColor\": \"blue.300\"\n    };\n\n    return (\n        <Button {...buttonStyle} onClick={handleToggle}>login</Button>\n    );\n};\n\nexport default LoginButton;","import { Button } from '@chakra-ui/react';\n\ninterface VisibilityToggler {\n    toggleVisibility: () => void \n}\nconst SignupButton = ({ toggleVisibility }: VisibilityToggler) => {\n    const handleToggle = (e: React.FormEvent) => {\n        e.preventDefault();\n        toggleVisibility();\n    };\n\n    const buttonStyle = {\n        \"size\": \"xs\",\n        \"bgColor\": \"green.300\"\n    };\n\n    return (\n        <Button {...buttonStyle} onClick={handleToggle}>sign up</Button>\n    );\n};\n\nexport default SignupButton;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../state/store';\nimport { isTokenData } from '../validators/loginValidators';\nimport { toggleLoginForm, toggleSignupForm } from '../state/reducers/userFormViews';\n\nimport LogoutButton from './login/LogoutButton';\nimport LoginButton from './login/LoginButton';\nimport SignupButton from './signup/SignupButton';\n\nconst NameView = ({ name }: { name: string }) => {\n    const spacing = {\n        'display': 'inline',\n        'marginLeft': '5px',\n        'fontFamily': '\"Lato\", sans-serif'\n    };\n\n    return (\n        <p style={spacing}>logged in as {name}</p>\n    );\n};\n\nconst UserBar = () => {\n    const token = useSelector((state: RootState) => state.login);\n    const dispatch = useDispatch();\n\n    const toggleLogin = () => {\n        dispatch(toggleLoginForm());\n    };\n\n    const toggleSignup = () => {\n        dispatch(toggleSignupForm());\n    };\n\n    const inline = {\n        'display': 'inline',\n        'fontSize': '0.9em',\n        'fontStyle': 'italic',\n        'wordSpacing': '-0.1em',\n    };\n\n    if (isTokenData(token)) {\n        return (\n            <div style={inline}>\n                <LogoutButton />\n                <NameView name={token.name} />\n            </div>\n        );\n    } else {\n        return (\n            <div style={inline}>\n                <LoginButton toggleVisibility={toggleLogin} />\n                <SignupButton toggleVisibility={toggleSignup} />\n            </div>\n        );\n    }\n};\n\nexport default UserBar;","import React from 'react';\nimport { \n    chakra,\n    ListIcon\n} from '@chakra-ui/react';\n\nimport { MdCheckCircle } from 'react-icons/md';\nimport { ImCross } from 'react-icons/im';\n\nexport const CheckCircle = chakra(MdCheckCircle);\nexport const Cross = chakra(ImCross);\n\nexport const tooltipStyle = {\n    'padding': '0',\n    'marginLeft': '0',\n    'fontSize': '14',\n    'fontFamily': '\"Lato\",  sans serif',\n};\n\nexport const headingStyle = {\n    'fontWeight': 'bold'\n};\n\nexport const listStyle = {\n    'listStyleType': 'none'\n};\n\nexport const ValidIndicator = <ListIcon as={CheckCircle} color=\"green.500\" />;\nexport const InvalidIndicator = <ListIcon as={Cross} color=\"red.500\" />;","export const MIN_PASSWORD_LENGTH = 8 as number;\nexport const MAX_NAME_LENGTH = 20 as number;\nexport const MIN_NAME_LENGTH = 1 as number;\nexport const MAX_USERNAME_LENGTH = 24 as number;\nexport const MIN_USERNAME_LENGTH = 6 as number;\nexport const MAX_PASSWORD_LENGTH = 18 as number;\n\nexport const USERNAME_ERROR = `Username must have at least ${MIN_USERNAME_LENGTH} characters`;\nexport const NAME_ERROR = `You must have a first and a last name`;\nexport const PASSWORD_ERROR = `Invalid password format`;\nexport const VERIFY_ERROR = `Passwords do not match`;","import { ParsedSignupData, SignupData } from \"../types\";\nimport { isString } from \"./parsers\";\n\nimport {\n    MIN_PASSWORD_LENGTH,\n    MIN_NAME_LENGTH,\n    MIN_USERNAME_LENGTH,\n\n    USERNAME_ERROR as usernameErr,\n    NAME_ERROR as nameErr,\n    PASSWORD_ERROR as passwordErr,\n    VERIFY_ERROR as verifyErr,\n} from '../constants';\n\nexport const isValidPassword = (pass: string) => {\n    return hasAtLeastOneLetter(pass)\n        && hasAtLeastOneNumber(pass) \n        && hasAtLeastXCharacters(pass, MIN_PASSWORD_LENGTH);\n};\n\nexport const hasAtLeastOneLetter = (value: string) => {\n    return /[a-zA-Z]/.test(value);\n};\n\nexport const hasAtLeastOneNumber = (value: string) => {\n    return /\\d/.test(value);\n};\n\nexport const hasAtLeastXCharacters = (value: string, x: number) => {\n    return value.length >= x;\n};\n\n\nexport const parseSignupData = (value: unknown): ParsedSignupData => {\n    if (!value) {\n        console.error(`argument to parseSignupData is falsey`);\n        throw new Error(`Unexpected error. Please refresh the page`);\n    }\n\n    const data = value as SignupData;\n    \n    if (!('firstName' in data) || !isValidLength(data.firstName, MIN_NAME_LENGTH)) \n        throw new Error(nameErr);\n    else if (!('lastName' in data) || !isValidLength(data.lastName, MIN_NAME_LENGTH)) \n        throw new Error(nameErr);\n    else if (!('username' in data) || !isValidLength(data.username, MIN_USERNAME_LENGTH)) \n        throw new Error(usernameErr);\n    else if (!('password' in data) || !isValidPassword(data.password)) \n        throw new Error(passwordErr);\n    else if (!('verify' in data) || data.verify !== data.password)\n        throw new Error(verifyErr);\n    else return {\n        username: data.username,\n        name: data.firstName + ' ' + data.lastName,\n        password: data.password\n    };\n};\n\nconst isValidLength = (value: unknown, minLength: number) => {\n    return isString(value) && hasAtLeastXCharacters(value, minLength);\n};","import React, { useState, useEffect } from 'react';\nimport {\n    UnorderedList,\n    ListItem,\n    Box\n} from '@chakra-ui/react';\nimport { \n    tooltipStyle,\n    headingStyle,\n    listStyle,\n    ValidIndicator,\n    InvalidIndicator,\n} from './styling';\n\nimport { \n    hasAtLeastOneLetter,\n    hasAtLeastOneNumber,\n    hasAtLeastXCharacters,\n} from '../../../validators/userValidators';\n\nimport { MIN_PASSWORD_LENGTH } from '../../../constants';\n\ninterface TooltipsViewFields {\n    letterIsValid: boolean,\n    numberIsValid: boolean,\n    characterIsValid: boolean,\n}\n\nconst PasswordTooltipsView = \n    ({ letterIsValid, numberIsValid, characterIsValid }: TooltipsViewFields) => {\n    return (\n        <Box {...tooltipStyle}>\n            <Box as='span' {...headingStyle}>Password</Box>\n            <UnorderedList {...listStyle}>\n                <ListItem>\n                    {letterIsValid\n                        ? ValidIndicator\n                        : InvalidIndicator}\n                    1 letter minimum\n                </ListItem>\n                <ListItem>\n                    {numberIsValid\n                        ? ValidIndicator\n                        : InvalidIndicator}\n                    1 number minimum\n                </ListItem>\n                <ListItem>\n                    {characterIsValid\n                        ? ValidIndicator\n                        : InvalidIndicator}\n                    8 characters minimum\n                </ListItem>\n            </UnorderedList>\n        </Box>\n    );\n};\n\ninterface TooltipsFields {\n    password: string,\n}\n\nconst PasswordTooltips = ({ password }: TooltipsFields) => {\n    const [characterIsValid, setCharacterValid] = useState(false);\n    const [numberIsValid, setNumberValid] = useState(false);\n    const [letterIsValid, setLetterValid] = useState(false);\n\n    useEffect(() => {\n        setCharacterValid(\n            hasAtLeastXCharacters(password, MIN_PASSWORD_LENGTH));\n        setNumberValid(\n            hasAtLeastOneNumber(password));\n        setLetterValid(\n            hasAtLeastOneLetter(password));\n    }, [password]);\n\n    return (\n        <PasswordTooltipsView\n            letterIsValid={letterIsValid}\n            numberIsValid={numberIsValid}\n            characterIsValid={characterIsValid}/>\n    );\n};\n\nexport default PasswordTooltips;","import React, { useEffect, useState } from 'react';\nimport { \n    UnorderedList,\n    Box,\n    ListItem\n} from '@chakra-ui/react';\nimport {\n    tooltipStyle,\n    headingStyle,\n    listStyle,\n    ValidIndicator,\n    InvalidIndicator\n} from './styling';\n\nimport { MIN_USERNAME_LENGTH } from '../../../constants';\nimport { hasAtLeastXCharacters } from '../../../validators/userValidators';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../state/store';\n\ninterface UsernameTooltipsFields {\n    characterIsValid: boolean,\n    usernameAvailable: boolean,\n}\nconst UsernameTooltipsView = ({ characterIsValid, usernameAvailable }: UsernameTooltipsFields) => {\n    return (\n        <Box {...tooltipStyle}>\n            <Box as='span' {...headingStyle}>Username</Box>\n            <UnorderedList {...listStyle}>\n                <ListItem>\n                    {characterIsValid\n                        ? ValidIndicator\n                        : InvalidIndicator}\n                    6 characters minimum\n                </ListItem>\n                <ListItem>\n                    {usernameAvailable\n                        ? ValidIndicator\n                        : InvalidIndicator}\n                    checked\n                </ListItem>\n            </UnorderedList>\n        </Box>\n    );\n};\n\ninterface TooltipFields {\n    username: string,\n}\nconst UsernameTooltips = ({ username }: TooltipFields) => {\n    const [characterIsValid, setCharacterIsValid] = useState(false);\n    const [usernameAvailable, setUsernameAvailable] = useState(false);\n\n    const availableUsernames = useSelector((state: RootState) => state.signup);\n\n    useEffect(() => {\n        setCharacterIsValid(\n            hasAtLeastXCharacters(username, MIN_USERNAME_LENGTH)\n        );\n\n        setUsernameAvailable(\n            availableUsernames.includes(username.toLowerCase())\n        );\n    }, [username, availableUsernames]);\n\n    return (\n        <UsernameTooltipsView \n            characterIsValid={characterIsValid}\n            usernameAvailable={usernameAvailable}/>\n    );\n};\n\nexport default UsernameTooltips;","import { Box } from '@chakra-ui/react';\nimport React from 'react';\nimport PasswordTooltips from './Password';\nimport UsernameTooltips from './Username';\n\ninterface Props {\n    password: string,\n    username: string,\n    gridArea: string\n}\nconst Tooltips = ({ password, username, gridArea }: Props) => {\n    return (\n        <Box gridArea={gridArea}>\n            <UsernameTooltips username={username}/>\n            <PasswordTooltips password={password} />\n        </Box>\n    );\n};\n\nexport default Tooltips;","import axios, { AxiosError } from 'axios';\nimport { ParsedSignupData } from '../types';\nimport { isTokenData } from '../validators/loginValidators';\n\nconst baseUrl = '/api/users';\n\nconst signup = async (user: ParsedSignupData) => {\n    try {\n        const { data } = await axios.post<unknown>(baseUrl, user);\n        if (!isTokenData(data)) throw new Error(`Failed to create account. Please try again`);\n        return data;\n    } catch(e) {\n        throw new Error((e as AxiosError).response?.data);\n    }\n};\n\nconst checkUsernameAvailable = async (username: string) => {\n    try {\n        const { data: isAvailable } = await axios.get<boolean>(`${baseUrl}/${username}`);\n        return isAvailable;    \n    } catch(e) {\n        throw new Error(`Username available checking error with backend: ${(e as AxiosError).response?.data.error}`);\n    }\n};\n\nexport default {\n    signup,\n    checkUsernameAvailable\n};","import { ActionPayload, SignupData } from \"../../types\";\nimport { AppDispatch, AppGetState } from \"../store\";\nimport signupService from \"../../services/signupService\";\nimport { parseSignupData } from \"../../validators/userValidators\";\nimport { isStringAndExists } from \"../../validators/parsers\";\n\nconst reducer = (state = ([] as string[]), { type, payload }: ActionPayload) => {\n    switch(type) {\n        case 'signup/username/save': {\n            if (isStringAndExists(payload)) {\n                return [\n                    ...state,\n                    payload\n                ];\n            } else return [...state];\n        }\n        default: return [...state];\n    }\n};\n\nexport const signup = (signupInfo: SignupData) => async (dispatch: AppDispatch) => {\n    const parsed = parseSignupData(signupInfo);\n    const token = await signupService.signup(parsed);\n\n    dispatch({\n        type: 'login/storeToken',\n        payload: token\n    });\n\n    dispatch({\n        type: 'login/init',\n        payload: token\n    });\n    return token;\n};\n\nexport const saveUsername = (username: string) => (dispatch: AppDispatch) => {\n    dispatch({\n        type: 'signup/username/save',\n        payload: username.toLowerCase()\n    });\n};\n\nconst checkDatabaseForAvailability = async (username: string) => {\n    const isAvailable = await signupService.checkUsernameAvailable(username);\n    return isAvailable;\n};\n\nexport const checkAvailability = (username: string) => \nasync (dispatch: AppDispatch, getState: AppGetState) => {\n    const lowercase = username.toLowerCase();\n    const availableUsernames = getState().signup;\n    \n    if (availableUsernames && availableUsernames.includes(lowercase)) {\n        return true;\n    } \n    else {\n        const isAvailable = await checkDatabaseForAvailability(lowercase);\n        if (isAvailable) {\n            dispatch({\n                type: 'signup/username/save',\n                payload: username\n            });\n            return true;\n        } \n        else return false;\n    }\n};\n\nexport default reducer;","const DEFAULT_DURATION = 3000;\n\nconst signupToasts = (() => {\n    const failed = (message: string) => {\n        return {\n            description: message,\n            status: 'error' as const,\n            duration: DEFAULT_DURATION,\n            isClosable: true\n        };\n    };\n\n    const available = (username: string) => {\n        return {\n            description: `username ${username} is available`,\n            status: 'success' as const,\n            duration: DEFAULT_DURATION,\n            isClosable: true\n        };\n    };\n\n    const success = {\n        description: `Account successfully created`,\n        status: 'success' as const,\n        duration: DEFAULT_DURATION,\n        isClosable: true,\n    };\n\n    return {\n        failed,\n        success,\n        available\n    };\n})();\n\nexport default signupToasts;","import { useDispatch } from \"react-redux\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport { MIN_USERNAME_LENGTH, USERNAME_ERROR } from \"../../constants\";\nimport toasts from '../../utils/toasts/signup';\nimport { checkAvailability } from \"../../state/reducers/signup\";\nimport { Button } from \"@chakra-ui/react\";\n\nconst UsernameAvailableButton = ({ username }: { username: string }) => {\n    const dispatch = useDispatch();\n    const toast = useToast();\n\n    const buttonStyle = {\n        \"fontSize\": \"12px\",\n        \"height\": \"24px\",\n        \"alignSelf\": \"center\",\n        \"color\": \"white\",\n        \"width\": \"min-content\",\n        \"marginLeft\": \"6px\",\n        \"backgroundColor\": \"red.700\",\n        \"_hover\": {\n            bg: \"red.500\",\n            cursor: \"pointer\"\n        },\n        \"_focus\": {\n            bg: \"blue\"\n        }\n    };\n\n\n    const handleCheckAvailability = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const lowercase = username.toLowerCase();\n        new Promise((resolve) => {\n            if (username.length < MIN_USERNAME_LENGTH) throw new Error(USERNAME_ERROR);\n            const isAvailable = dispatch(checkAvailability(lowercase));\n            resolve(isAvailable);\n        })\n        .then((isAvailable) => {\n            if (typeof isAvailable === 'boolean') {\n                if (isAvailable) toast(toasts.available(username));\n                else toast(toasts.failed(`username ${username} is already taken`));\n            }\n        })\n        .catch(error => {\n            toast(toasts.failed(error.message));\n            console.log(`failed checking availability: ${error.message}`);\n        });\n    };\n\n    return (\n        <Button\n            {...buttonStyle} \n            as=\"div\" \n            onClick={handleCheckAvailability}>check</Button>\n    );\n};\n\nexport default UsernameAvailableButton;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../state/store';\nimport {\n    FormControl,\n    InputLeftElement,\n    InputGroup,\n    Input,\n    chakra,\n    Grid,\n    Button,\n    useToast\n} from '@chakra-ui/react';\nimport { FaUserAlt, FaLock, FaAddressCard } from 'react-icons/fa';\n\nimport { useField } from '../../utils/hooks';\nimport { SignupFormViewFields } from '../../types';\nimport Tooltips from './tooltips/Tooltips';\n\nimport { \n    MAX_NAME_LENGTH, \n    MAX_USERNAME_LENGTH, \n    MAX_PASSWORD_LENGTH} from '../../constants';\nimport { signup } from \"../../state/reducers/signup\";\nimport signupToasts from '../../utils/toasts/signup';\nimport { loginToasts } from '../../utils/toasts/login';\nimport { isTokenData } from '../../validators/loginValidators';\nimport { hideSignupForm, hideSignupSpinner, showSignupSpinner } from '../../state/reducers/userFormViews';\nimport UsernameAvailableButton from './CheckUsernameButton';\n\nconst CFaUserAlt = chakra(FaUserAlt);\nconst CFaLock = chakra(FaLock);\nconst CFaAddressCard = chakra(FaAddressCard);\n\nconst SignupFormView = \n    ({ firstName, lastName, username, password, verify, spinnerVisible, handleSignup }: SignupFormViewFields) => {\n\n    const inputStyle = {\n        \"size\": \"sm\",\n        \"w\": \"100%\",\n        \"variant\": \"filled\"\n    };\n\n    const containerStyle = {\n        'templateColumns': '1fr 1fr',\n        'templateAreas':\n            `'firstName lastName'\n            'username username'\n            'password verify'\n            'tooltips submit'`,\n        'width': 400,\n        'columnGap': '5px',\n        'rowGap': '7px',\n    };\n\n    const buttonStyle = {\n        \"size\": \"xs\",\n        \"textColor\": \"white\",\n        \"bgColor\": \"blue.700\",\n        \"width\": \"min-content\",\n        \"_hover\": {bg: \"blue.400\"},\n        \"justifySelf\": \"right\",\n        \"marginRight\": \"10px\",\n        \"display\": \"inline\",\n        \"type\": \"submit\" as const\n    };\n\n    const SubmitButton = spinnerVisible\n            ? <Button {...buttonStyle} gridArea='submit' isLoading onSubmit={handleSignup}>sign up</Button>\n            : <Button {...buttonStyle} gridArea='submit' onSubmit={handleSignup}>sign up</Button>;\n\n    return (\n        <FormControl as=\"form\" onSubmit={handleSignup}>\n            <Grid {...containerStyle}>\n                <InputGroup {...inputStyle} gridArea='firstName'>\n                    <InputLeftElement\n                        pointerEvents='none'\n                        children={<CFaAddressCard />} />\n                    <Input\n                        {...firstName}\n                        {...inputStyle}\n                        maxlength={MAX_NAME_LENGTH} \n                        placeholder='first name'/>\n                </InputGroup>\n                <InputGroup {...inputStyle} gridArea='lastName'>\n                    <Input\n                        {...lastName} \n                        {...inputStyle} \n                        maxlength={MAX_NAME_LENGTH} \n                        placeholder='last name'/>\n                </InputGroup>\n                <InputGroup {...inputStyle} gridArea='username'>\n                    <InputLeftElement\n                        pointerEvents='none'\n                        children={<CFaUserAlt />} />\n                    <Input \n                        {...username} \n                        {...inputStyle} \n                        maxlength={MAX_USERNAME_LENGTH} \n                        placeholder='username'/>\n                    <UsernameAvailableButton username={username.value} />\n                </InputGroup>\n                <InputGroup {...inputStyle} gridArea='password'>\n                    <InputLeftElement\n                        pointerEvents='none'\n                        children={<CFaLock />} />\n                    <Input \n                        {...password}\n                        {...inputStyle}\n                        maxlength={MAX_PASSWORD_LENGTH}\n                        placeholder='password'/>\n                </InputGroup>\n                <InputGroup {...inputStyle} gridArea='verify'>\n                    <Input {...verify} {...inputStyle} placeholder='verify'/>\n                </InputGroup>\n                <Tooltips username={username.value} password={password.value} gridArea='tooltips'/>\n                {SubmitButton}\n            </Grid>\n        </FormControl>\n    );\n};\n\nconst SignupForm = () => {\n    const formVisible = useSelector((state: RootState) => state.userFormViews.signupForm);\n    const spinnerVisible = useSelector((state: RootState) => state.userFormViews.signupSpinner);\n    const dispatch = useDispatch();\n    const toast = useToast();\n\n    const username = useField('text');\n    const firstName = useField('text');\n    const lastName = useField('text');\n    const password = useField('password');\n    const verify = useField('password');\n\n    const handleSignup = (e: React.FormEvent) => {\n        e.preventDefault();\n    \n        new Promise((resolve) => {\n            dispatch(showSignupSpinner());\n\n            const tokenData = dispatch(signup({\n                username: username.value,\n                firstName: firstName.value,\n                lastName: lastName.value,\n                password: password.value,\n                verify: verify.value,\n            }));\n            resolve(tokenData);\n        })\n        .then(tokenData => {\n            if (isTokenData(tokenData)) {\n                toast(loginToasts.success(tokenData.name));\n                username.clearField();\n                firstName.clearField();\n                lastName.clearField();\n                password.clearField();\n                verify.clearField();\n                dispatch(hideSignupForm());\n            }\n        })\n        .catch((error) => {\n            console.error(`Failed to create user: ${error.message}`);\n            toast(signupToasts.failed(`Failed to create user`));\n        })\n        .finally(() => {\n            dispatch(hideSignupSpinner());\n        });\n    };\n\n    return (\n        formVisible \n            ? <SignupFormView \n                username={username} \n                firstName={firstName} \n                lastName={lastName}\n                password={password}\n                verify={verify}\n                handleSignup={handleSignup}\n                spinnerVisible={spinnerVisible} />\n            : null\n    );\n};\n\nexport default SignupForm;","import React, { useEffect } from 'react';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch\n} from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Box, ChakraProvider, useToast } from '@chakra-ui/react';\nimport { noteToasts } from './utils/toasts/notes';\n\nimport { initializeNotes } from './state/reducers/notes';\nimport { saveTokenToState } from './state/reducers/login';\n\nimport NavBar from './components/NavBar';\nimport Home from './components/Home';\nimport NotesList from './components/notes/NotesList';\nimport NoteForm from './components/notes/NoteForm';\nimport Pad from './components/pad/Pad';\nimport LoginForm from './components/login/LoginForm';\nimport UserBar from './components/UserBar';\nimport SignupForm from './components/signup/SignupForm';\n\nfunction App() {\n    const dispatch = useDispatch();\n    const toast = useToast();\n\n    useEffect(() => {\n        try {\n            dispatch(initializeNotes());\n            dispatch(saveTokenToState());    \n        } catch(e) {\n            console.error(`Network error during notes initialization`);\n            toast(noteToasts.failedGet);\n        }\n    }, [dispatch]);\n\n    return (\n        <ChakraProvider>\n            <Router>\n                <Box>\n                    <NavBar />\n                    <UserBar />\n                    <Switch>\n                        <Route path='/notes'>\n                            <NotesList />\n                            <NoteForm />\n                        </Route>\n                        <Route path='/pad'>\n                            <Pad />\n                        </Route>\n                        <Route path='/'>\n                            <Home />\n                        </Route>\n                    </Switch> <br />\n                    <LoginForm />\n                    <SignupForm />\n                </Box>\n            </Router>\n        </ChakraProvider>\n    );\n}\n\nexport default App;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport notesReducer from './reducers/notes';\nimport loginReducer from './reducers/login';\nimport signupReducer from './reducers/signup';\nimport userFormViews from './reducers/userFormViews';\nimport noteActionViews from './reducers/noteActionViews';\n\nimport thunk from 'redux-thunk';\n\nconst root = combineReducers({\n    notes: notesReducer,\n    login: loginReducer,\n    signup: signupReducer,\n    userFormViews: userFormViews,\n    noteActionViews: noteActionViews,\n});\n\nconst store = createStore(\n    root,\n    applyMiddleware(thunk)\n);\n\nexport default store;\n\nexport type AppDispatch = typeof store.dispatch;\nexport type AppGetState = typeof store.getState;\n\n//To use as type for useSelector's state parameter\nexport type RootState = ReturnType<typeof store.getState>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './state/store';\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}